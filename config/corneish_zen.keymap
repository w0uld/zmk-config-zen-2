/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* userspace modules */
#include "resources/keypos_42keys.h"
#include "resources/z_macro.h"      // macro_github
#include "resources/z_combo.h"      // Z_COMBO
#include "resources/z_behavior.h"   // Z_HOLDTAP

#define HOST_OS 9
#define Z_UNICODE_LEAD  &macro_tap &kp RA(U)
#define Z_UNICODE_TRAIL &macro_tap &kp SPACE
#include "resources/z_unicode.h"    // ZMK_UNICODE_SINGLE, ZMK_UNICODE_PAIR, requires WinCompose

/* layer aliases */
#define DVRK 0
#define QWER 1
#define GAME 2
#define NMBR 3
#define NAVI 4
#define ACNT 5

/* variables */
#define _TIME_ZERO  0
#define _QUIKTAP_MS 250
#define _TAPTERM_MS 200
#define _PRIOR_IDLE 250
#define _COMBO_SHRT 20
#define _COMBO_MEDM 30
#define _COMBO_LONG 50

/* miscellaneous */
#undef Z_ALL
#define Z_ALL              DVRK QWER GAME NMBR NAVI
#define _IGNORE_NUMBER     N0 N1 N2 N3 N4 N5 N6 N7 N8 N9
#define _IGNORE_NUMPAD     KP_N0 KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_DOT KP_EQUAL KP_DIVIDE KP_MULTIPLY KP_MINUS KP_PLUS
#define _IGNORE_NAVGTN     LEFT RIGHT UP DOWN PG_UP PG_DN HOME END
#define _IGNORE_SYMBOL     DOT COMMA PLUS MINUS STAR FSLH EQUAL SEMI
#define _IGNORE_OTHERS     BSPC DEL TAB

/* key matrix setup */
/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &five_column_transform;
    };
};

/* adjustments */
&mt {
    quick_tap_ms = <_QUIKTAP_MS>;
    tapping_term_ms = <_TAPTERM_MS>;
    flavor = "hold-preferred";  //originally balanced
    retro-tap;                  //enabling retro-tap
};

&lt {
    quick_tap_ms = <_QUIKTAP_MS>;
    tapping_term_ms = <_TAPTERM_MS>;
    flavor = "balanced";
    retro-tap;                  //enabling retro-tap
};


/* autoshift */
#define AS(keycode) &z_autoshift LS(keycode) keycode

ZMK_BEHAVIOR(z_autoshift, hold_tap,
    flavor = "tap-preferred";
    quick-tap-ms = <_QUIKTAP_MS>;
    tapping-term-ms = <_TAPTERM_MS>;
    bindings = <&kp>, <&kp>;
)


/* smart_num, requires urob's PR #1451 */
/* tap: space | double tap: num-word | hold: num-layer */
#define SMART_NUMBER &z_smartnumber NMBR 0

&num_word {
    layers = <NMBR>;
    continue-list = <_IGNORE_NUMBER _IGNORE_NUMPAD _IGNORE_OTHERS _IGNORE_NAVGTN _IGNORE_SYMBOL>;
    ignore-modifiers;
};
ZMK_BEHAVIOR(z_smartnumber, hold_tap,
    flavor = "hold-preferred";
    quick-tap-ms = <_TIME_ZERO>;
    tapping-term-ms = <_TAPTERM_MS>;
    bindings = <&mo>, <&num_dance>;       // hold: layer switch | tap: tap-dance
    retro-tap;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp SPACE>, <&num_word>;  // reverse this for sticky-num on single tap
)


/* smart_nav, requires urob's PR #1451 */
ZMK_BEHAVIOR(nav_word, caps_word,
    layers = <NAVI>;
    continue-list = <_IGNORE_OTHERS _IGNORE_NAVGTN _IGNORE_NUMPAD>;
    ignore-modifiers;
)


/* combos, uses z_combo.h */
// syntax: Z_COMBO(name, combo_bindings, keypos, combo_timeout, combo_prioridle, combo_layers)
Z_COMBO(combo_esc,          AS(ESC),        LT5 LT4,         _COMBO_SHRT, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_backslash,    AS(BSLH),       LB5 LB4,         _COMBO_SHRT, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_grave,        AS(GRAVE),      LH2 LH1,         _COMBO_SHRT, _PRIOR_IDLE, Z_ALL)

Z_COMBO(combo_copy,         &kp LC(INS),    LB4 LB3 LB2,     _COMBO_SHRT, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_paste,        &kp LS(INS),    LB3 LB2 LB1,     _COMBO_SHRT, _PRIOR_IDLE, Z_ALL)

Z_COMBO(combo_lctrl,        &sk LCTRL,      LM1 LM2,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rctrl,        &sk LCTRL,      RM1 RM2,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lctrlshift,   &sk LS(LCTRL),  LM1 LM2 LM3,     _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rctrlshift,   &sk LS(LCTRL),  RM1 RM2 RM3,     _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)

Z_COMBO(combo_locknum0,     &kp KP_NLCK,    RM5 RT5,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lockcaps,     &kp CLCK,       RM5 RB5,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lockscrl,     &kp SLCK,       RT5 RB5,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)

Z_COMBO(combo_layergame,    &tog GAME,      LH0 RH0,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER GAME)
Z_COMBO(combo_layerqwer,    &tog QWER,      LH2 RH2,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_layernavi,    &nav_word,      RH0 RH2,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER NAVI)

Z_COMBO(combo_bltthclr,     &bt BT_CLR,     RT0 RB0,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_bltth1,       &bt BT_SEL 0,   RT4 RB4,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_bltth2,       &bt BT_SEL 1,   RT3 RB3,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_bltth3,       &bt BT_SEL 2,   RT2 RB2,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_bltth4,       &bt BT_SEL 3,   RT1 RB1,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER)

Z_COMBO(combo_github,       &macro_github,  LT5 RT5,         _COMBO_SHRT, _PRIOR_IDLE, DVRK QWER) // uses z_macro.h


/* unicode, uses z_unicode.h, requires WinCompose */
// syntax for regular case:  #define ZMK_UNICODE_SINGLE(name, L0, L1, L2, L3) 
// syntax for low/uppercase: #define   ZMK_UNICODE_PAIR(name, L0, L1, L2, L3, U0, U1, U2, U3)
ZMK_UNICODE_PAIR(hu_a_a,        N0, N0,  E, N1,         N0, N0,  C, N1) // á/Á
ZMK_UNICODE_PAIR(hu_e_a,        N0, N0,  E, N9,         N0, N0,  C, N9) // é/É
ZMK_UNICODE_PAIR(hu_i_a,        N0, N0,  E,  D,         N0, N0,  C,  D) // í/Í
ZMK_UNICODE_PAIR(hu_o_a,        N0, N0,  F, N3,         N0, N0,  D, N3) // ó/Ó
ZMK_UNICODE_PAIR(hu_u_a,        N0, N0,  F,  A,         N0, N0,  D,  A) // ú/Ú
ZMK_UNICODE_PAIR(hu_o_di,       N0, N0,  F, N6,         N0, N0,  D, N6) // ö/Ö
ZMK_UNICODE_PAIR(hu_o_da,       N0, N1, N5, N1,         N0, N1, N5, N0) // ő/Ő
ZMK_UNICODE_PAIR(hu_u_di,       N0, N0,  F,  C,         N0, N0,  D,  C) // ü/Ü
ZMK_UNICODE_PAIR(hu_u_da,       N0, N1, N7, N1,         N0, N1, N7, N0) // ű/Ű


/* keymap */
/ {
    keymap {
            compatible = "zmk,keymap";

                dvorak_layer {
                        label = "DVRK";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
      &lt NAVI TAB      &kp APOS        &kp COMMA       &kp DOT         &kp P           &kp Y               &kp F           &kp G           &kp C           &kp R           &kp L           &kp FSLH
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp LCTRL       &kp A           &kp O           &kp E           &kp U           &kp I               &kp D           &kp H           &kp T           &kp N           &kp S           &kp MINUS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp LSHFT       &kp SEMI        &kp Q           &kp J           &kp K           &kp X               &kp B           &kp M           &kp W           &kp V           &kp Z       &mt LSHFT EQUAL
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &kp LALT        &kp SPACE     SMART_NUMBER       &lt NAVI BSPC      &sl ACNT      &mt LGUI RET
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                qwerty_layer {
                        label = "QWER";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp Q           &kp W           &kp E           &kp R           &kp T               &kp Y           &kp U           &kp I           &kp O           &kp P           &kp LBKT
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp A           &kp S           &kp D           &kp F           &kp G               &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp APOS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp Z           &kp X           &kp C           &kp V           &kp B               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH    &mt LSHFT RBKT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &kp LSHFT       &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                gaming_layer {
                        label = "GAME";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp T           &kp Q           &kp W           &kp E           &kp R               &kp Y           &kp PG_UP       &kp UP          &kp PG_DN       &kp P           &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp I           &kp LCTRL       &kp A           &kp S           &kp D           &kp F               &kp H           &kp LEFT        &kp DOWN        &kp RIGHT       &kp SEMI        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp G           &kp LSHFT       &kp Z           &kp X           &kp C           &kp V               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &kp LSHFT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &tog GAME       &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                number_layer {
                        label = "NMBR";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          AS(N1)          AS(N2)          AS(N3)          AS(N4)          AS(N5)              AS(LPAR)        AS(N7)          AS(N8)          AS(N9)          AS(RPAR)        AS(FSLH)
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp LGUI        &kp LALT        &kp LCTRL       &kp LSHFT       &kp F13             AS(LBKT)        AS(N4)          AS(N5)          AS(N6)          AS(RBKT)        AS(MINUS)
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          AS(SEMI)        AS(APOS)        AS(COMMA)       AS(DOT)         &kp KP_DOT          AS(GRAVE)       AS(N1)          AS(N2)          AS(N3)          AS(BSLH)        AS(EQUAL)
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          AS(N0)          &kp KP_DOT
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                navigation_layer {
                        label = "NAVI";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp PAUSE_BREAK     &kp PG_UP       &kp UP          &kp PG_DN       &kp HOME        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans        &mt LGUI F5     &mt LALT F6     &mt LCTRL F7    &mt LSHFT F8      &kp F13             &kp PSCRN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp END         &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp F9          &kp F10         &kp F11         &kp F12         &kp F14             &kp INS       &kp C_VOL_DN      &kp C_MUTE    &kp C_VOL_UP      &kp C_PP        &kp LSHFT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &kp DEL         &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                accent_layer {
                        label = "ACNT";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &hu_o_di        &hu_o_da        &hu_u_di        &hu_u_da        &trans              &trans          &trans          &trans          &trans          &trans          &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &hu_a_a         &hu_o_a         &hu_e_a         &hu_u_a         &hu_i_a             &trans          &trans          &trans          &trans          &trans          &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &trans          &trans          &trans          &trans          &trans              &trans          &trans          &trans          &trans          &trans          &kp LSHFT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &trans          &kp RALT
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };
        };
};


