/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>        // to enable OUT_USB, OUT_BLE, OUT_TOG
#include <dt-bindings/zmk/pointing.h>       // to enable mouse

/* userspace modules */
#include "resources/keypos_42keys.h"        // human readable bindings
#include "resources/z_behavior.h"           // behavior preprocessor
#include "resources/z_combo.h"              // Z_COMBO
#include "resources/z_autoshift_legacy.h"   // autoshift
#include "resources/y_macro_github.h"       // macro_github

/* layer aliases */
#define DVRK  0
#define QWER  1
#define GAME  2
#define NMBR  3
#define NAVI  4
#define MOUS  5
#undef  Z_ALL
#define Z_ALL DVRK QWER GAME NMBR NAVI MOUS

/* timings */
#define _QUIKTAP_MS  250
#define _TAPTERM_MS  200
#define _PRIOR_ZERO  0
#define _PRIOR_IDLE  250
#define _PRIOR_LONG  500
#define _COMBO_SHRT  15
#define _COMBO_MEDM  30
#define _COMBO_LONG  50

/* ignorecodes */
#define _IGNORE_NUMBER     N0 N1 N2 N3 N4 N5 N6 N7 N8 N9
#define _IGNORE_NUMPAD     KP_N0 KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_DOT KP_EQUAL KP_DIVIDE KP_MULTIPLY KP_MINUS KP_PLUS
#define _IGNORE_NAVGTN     LEFT RIGHT UP DOWN PG_UP PG_DN HOME END
#define _IGNORE_SYMBOL     DOT COMMA PLUS MINUS STAR FSLH EQUAL SEMI
#define _IGNORE_OTHERS     BSPC DEL TAB

/* mouse settings */
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 120   // default: 10

/* adjustments */
&mt {
    quick-tap-ms    = <_QUIKTAP_MS>;
    tapping-term-ms = <_TAPTERM_MS>;
    flavor          = "hold-preferred";  //originally balanced
    retro-tap;                           //enabling retro-tap
};

&lt {
    quick-tap-ms    = <_QUIKTAP_MS>;
    tapping-term-ms = <_TAPTERM_MS>;
    flavor          = "balanced";
    retro-tap;                          //enabling retro-tap
};


/* ref: https://github.com/urob/zmk-auto-layer */
ZMK_BEHAVIOR(auto_lyr, auto_layer,
    continue-list   = <_IGNORE_OTHERS _IGNORE_NAVGTN _IGNORE_NUMPAD _IGNORE_NUMBER _IGNORE_SYMBOL>;
    ignore-modifiers;
)


/* combos, uses z_combo.h */
// syntax: Z_COMBO(name, combo_bindings, keypos, combo_timeout, combo_prioridle, combo_layers)
Z_COMBO(combo_esc,          &kp ESC,        LT5 LT4,         _COMBO_MEDM, _PRIOR_ZERO, Z_ALL)
Z_COMBO(combo_enter,        &kp RET,        RB3 RB2 RB1,     _COMBO_LONG, _PRIOR_ZERO, Z_ALL)

Z_COMBO(combo_backslash,    AS(BSLH),       LB5 LB4,         _COMBO_MEDM, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_grave,        AS(GRAVE),      LH2 LH1,         _COMBO_MEDM, _PRIOR_IDLE, Z_ALL)

Z_COMBO(combo_lctrl,        &sk LCTRL,      LM1 LM2 LM3,     _COMBO_MEDM, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rctrl,        &sk LCTRL,      RM1 RM2 RM3,     _COMBO_MEDM, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lgui,         &sk LGUI,       LM1 LT2 LM3,     _COMBO_MEDM, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rgui,         &sk LGUI,       RM1 RT2 RM3,     _COMBO_MEDM, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lctrlshft,    &sk LS(LCTRL),  LM1 LM2 LM3 LM4, _COMBO_LONG, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rctrlshft,    &sk LS(LCTRL),  RM1 RM2 RM3 RM4, _COMBO_LONG, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lguishft,     &sk LS(LGUI),   LM1 LT2 LM3 LM4, _COMBO_LONG, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rguishft,     &sk LS(LGUI),   RM1 RT2 RM3 RM4, _COMBO_LONG, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_lctrlgui,     &sk LG(LCTRL),  LM1 LM2 LM3 LT2, _COMBO_LONG, _PRIOR_IDLE, DVRK QWER)
Z_COMBO(combo_rctrlgui,     &sk LG(LCTRL),  RM1 RM2 RM3 RT2, _COMBO_LONG, _PRIOR_IDLE, DVRK QWER)

Z_COMBO(combo_copy,         &kp LC(INS),    LB4 LB3 LB2,     _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_paste,        &kp LS(INS),    LB3 LB2 LB1,     _COMBO_LONG, _PRIOR_IDLE, Z_ALL)

Z_COMBO(combo_locknum0,     &kp KP_NLCK,    RH0 RT5,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_lockcaps,     &kp CLCK,       RH0 RM5,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_lockscrl,     &kp SLCK,       RH0 RB5,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)

Z_COMBO(combo_ble_clr,      &bt BT_CLR,     RT0 RB0,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_ble_1,        &bt BT_SEL 0,   RT4 RB4,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_ble_2,        &bt BT_SEL 1,   RT3 RB3,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_ble_3,        &bt BT_SEL 2,   RT2 RB2,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_ble_4,        &bt BT_SEL 3,   RT1 RB1,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL)

Z_COMBO(combo_out_tog,      &out OUT_TOG,   LT0 LB0,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL) // uses outputs.h
Z_COMBO(combo_out_usb,      &out OUT_USB,   LT5 LB5,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL) // uses outputs.h
Z_COMBO(combo_out_blt,      &out OUT_BLE,   LT4 LB4,         _COMBO_LONG, _PRIOR_IDLE, Z_ALL) // uses outputs.h
 
Z_COMBO(combo_layerqwer,    &tog QWER,      LH2 RH2,         _COMBO_MEDM, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_layergame,    &tog GAME,      LH0 RH0,         _COMBO_MEDM, _PRIOR_IDLE, Z_ALL)
Z_COMBO(combo_layernmbr,    &auto_lyr NMBR, LH0 LH2,         _COMBO_MEDM, _PRIOR_IDLE, Z_ALL) // ref: https://github.com/urob/zmk-auto-layer
Z_COMBO(combo_layernavi,    &auto_lyr NAVI, RH0 RH2,         _COMBO_MEDM, _PRIOR_IDLE, Z_ALL) // ref: https://github.com/urob/zmk-auto-layer

Z_COMBO(combo_github,       &macro_github,  LB5 RB5,         _COMBO_MEDM, _PRIOR_IDLE, DVRK QWER) // uses y_macro_github.h
Z_COMBO(combo_studio,       &studio_unlock, LT5 RT5,         _COMBO_MEDM, _PRIOR_IDLE, DVRK QWER)



/* keymap */
/*
                TRNS_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &trans          &trans          &trans          &trans          &trans          &trans              &trans          &trans          &trans          &trans          &trans          &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &trans          &trans          &trans          &trans          &trans              &trans          &trans          &trans          &trans          &trans          &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &trans          &trans          &trans          &trans          &trans              &trans          &trans          &trans          &trans          &trans          &trans
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &trans          &trans          &trans              &trans          &trans          &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };
*/

/ {
    keymap {
            compatible = "zmk,keymap";

                DVRK_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &lt NAVI TAB    &kp APOS        &kp COMMA       &kp DOT         &kp P           &kp Y               &kp F           &kp G           &kp C           &kp R           &kp L           &kp FSLH
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &kp LCTRL       &kp A           &kp O           &kp E           &kp U           &kp I               &kp D           &kp H           &kp T           &kp N           &kp S           &kp MINUS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &kp LSHFT       &kp SEMI        &kp Q           &kp J           &kp K           &kp X               &kp B           &kp M           &kp W           &kp V           &kp Z           &mt LSHFT EQUAL
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &kp LALT        &kp SPACE       &sl NMBR            &lt NAVI BSPC   &kp RALT        &tog MOUS
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                QWER_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &trans          &kp Q           &kp W           &kp E           &kp R           &kp T               &kp Y           &kp U           &kp I           &kp O           &kp P           &kp LBKT
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &kp A           &kp S           &kp D           &kp F           &kp G               &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp APOS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &kp Z           &kp X           &kp C           &kp V           &kp B               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &mt LSHFT RBKT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &trans          &trans          &trans              &trans          &trans          &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                GAME_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &trans          &kp T           &kp Q           &kp W           &kp E           &kp R               &kp Y           &kp PG_UP       &kp UP          &kp PG_DN       &kp P           &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &mt LCTRL I     &kp LCTRL       &kp A           &kp S           &kp D           &kp F               &kp H           &kp LEFT        &kp DOWN        &kp RIGHT       &kp SEMI        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &mt LSHFT G     &kp LSHFT       &kp Z           &kp X           &kp C           &kp V               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &kp LSHFT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &trans          &trans          &trans              &trans          &tog GAME       &kp RET
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                NMBR_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &trans          AS(N1)          AS(N2)          AS(N3)          AS(N4)          AS(N5)              AS(LPAR)        AS(N7)          AS(N8)          AS(N9)          AS(RPAR)        AS(FSLH)
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &kp LGUI        &kp LALT        &kp LCTRL       &kp LSHFT       &kp F13             AS(LBKT)        AS(N4)          AS(N5)          AS(N6)          AS(RBKT)        AS(MINUS)
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          AS(SEMI)        AS(APOS)        AS(COMMA)       AS(DOT)         &kp KP_DOT          AS(GRAVE)       AS(N1)          AS(N2)          AS(N3)          AS(BSLH)        AS(EQUAL)
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &trans          &trans          &trans              &trans          AS(N0)          &kp KP_DOT
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                NAVI_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &trans          &kp F1          &kp F2          &kp F3          &kp F4          &kp F5              &kp PAUSE_BREAK &kp PG_UP       &kp UP          &kp PG_DN       &kp HOME        &msc SCRL_UP
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &mt LGUI F5     &mt LALT F6     &mt LCTRL F7    &mt LSHFT F8    &kp F14             &kp PSCRN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp END         &msc SCRL_DOWN
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &kp F9          &kp F10         &kp F11         &kp F12         &kp F15             &kp INS         &kp C_VOL_DN    &kp C_MUTE      &kp C_VOL_UP    &kp C_PP        &kp LSHFT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &trans          &trans          &trans              &trans          &kp DEL         &kp RET
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                MOUS_layer {
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
     &trans          &kp F13         &kp F14         &kp F15         &kp F16         &msc SCRL_UP        &msc SCRL_UP    &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN  &kp HOME        &msc SCRL_UP
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &mkp MB4        &mkp MB3        &mkp MB2        &mkp MB1        &msc SCRL_DOWN      &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT &kp END         &msc SCRL_DOWN
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
     &trans          &mkp MB5        &kp F21         &kp F22         &kp F23         &kp F24             &kp F18         &msc SCRL_LEFT  &kp F19         &msc SCRL_RIGHT &kp F20         &kp LSHFT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                     &trans          &trans          &trans              &trans          &kp DEL         &tog MOUS
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };
        };
};


