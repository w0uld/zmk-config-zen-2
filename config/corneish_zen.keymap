#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    // zmk,matrix_transform = &five_column_transform;
  };
};


// Layer aliases
#define DVRK 0
#define QWER 1
#define GAME 2
#define ACNT 3
#define NMBR 4
#define NAVI 5

// Key position groups
#define KEYS_L       0  1  2  3  4  5 12 13 14 15 16 17 24 25 26 27 28 29
#define KEYS_R       6  7  8  9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define THUMBS      36 37 38 39 40 41 

// Variables
#define _TIME_ZERO  0
#define _QUIKTAP_MS 250
#define _TAPTERM_MS 200
#define _PRIOR_IDLE 150
#define _COMBO_SHRT 20
#define _COMBO_MEDM 30
#define _COMBO_LONG 50

// Reference definitions
#define AS(keycode) &_autoshift LS(keycode) keycode


// Mod-Morph dynamic macro (second part in behaviors, credit goes to caksoylar)

    #define MM_ACCENT(name, regular_binding, morph_binding) \
                name: name { \
                    compatible = "zmk,behavior-mod-morph"; \
                    label = ZMK_MACRO_STRINGIFY(_mma_ ## name); \
                    #binding-cells = <0>; \
                    bindings = <&kp regular_binding>, <&kp morph_binding>; \
                    mods = <(MOD_RALT)>; \
                };


// Adjustments

    &mt {
        quick_tap_ms = <_QUIKTAP_MS>;
        tapping_term_ms = <_TAPTERM_MS>;
        // flavor = "balanced";
        flavor = "hold-preferred";
        retro-tap;
    };

    &lt {
        quick_tap_ms = <_QUIKTAP_MS>;
        tapping_term_ms = <_TAPTERM_MS>;
        flavor = "balanced";
        retro-tap;
    };

    &caps_word {
        continue-list = <BACKSPACE DELETE UNDERSCORE MINUS F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24>;
    };


// Macros

/ {
    macros {

        macro_githublink: macro_githublink {
            label = "macro_githublink";
            compatible = "zmk,behavior-macro";
            tap-ms = <5>;
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp H &kp T &kp T &kp P &kp S &kp COLON &kp FSLH &kp FSLH>
                , <&macro_tap &kp G &kp I &kp T &kp H &kp U &kp B &kp DOT &kp C &kp O &kp M &kp FSLH>
                , <&macro_tap &kp W &kp N0 &kp U &kp L &kp D &kp FSLH>
                ;
        };
    };
};


// Behaviors

/ {
    behaviors {
        
        // AutoShift

        _autoshift: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick_tap_ms = <_QUIKTAP_MS>;
            tapping_term_ms = <_TAPTERM_MS>;
            bindings = <&kp>, <&kp>;
        };

        _lt: alternative_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "ALT_LAYERTAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            quick_tap_ms = <_TIME_ZERO>;
            tapping_term_ms = <_TAPTERM_MS>;
            bindings = <&mo>, <&kp>;
            retro-tap;
        };


        // Mod-Morph (first part in definitions, credit goes to caksoylar)

        MM_ACCENT(_mma_a, A, F15)
        MM_ACCENT(_mma_o, O, F16)
        MM_ACCENT(_mma_e, E, F17)
        MM_ACCENT(_mma_u, U, F18)
        MM_ACCENT(_mma_i, I, F19)
        MM_ACCENT(_mma_apos, APOS, F20)
        MM_ACCENT(_mma_comma, COMMA, F21)
        MM_ACCENT(_mma_dot, DOT, F22)
        MM_ACCENT(_mma_p, P, F23)

    };
};


// Combos

/ {
    combos {

    // Key swaps

        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <0 1>;
            bindings = <AS(ESC)>;
        };

        combo_backslash {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <24 25>;
            bindings = <AS(BSLH)>;
        };

        combo_grave {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <36 37>;
            bindings = <AS(GRAVE)>;
        };

    // Locks

        combo_numlock {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <39 6>;
            bindings = <&kp KP_NLCK>;
        };

        combo_capslock {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <39 18>;
            bindings = <&kp CLCK>;
        };

        combo_scrolllock {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <39 30>;
            bindings = <&kp SLCK>;
        };

    // Copy-Paste

        combo_copy {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <25 26 27>;
            bindings = <&kp LC(INS)>;
        };

        combo_paste {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <26 27 28>;
            bindings = <&kp LS(INS)>;
        };

    // Modifiers

        combo_lctrl {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <15 16>;
            bindings = <&sk LCTRL>;
        };
        combo_lctrlshft {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <14 15 16>;
            bindings = <&sk LS(LCTRL)>;
        };

        combo_rctrl {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <19 20>;
            bindings = <&sk LCTRL>;
        };
        combo_rctrlshft {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <19 20 21>;
            bindings = <&sk LS(LCTRL)>;
        };

    // Layers

        combo_layertogglegaming {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <39 41>;
            bindings = <&tog GAME>;
        };

        combo_layertogglegqwerty {
            timeout-ms = <_COMBO_SHRT>;
            require-prior-idle-ms = <_PRIOR_IDLE>;
            key-positions = <36 38>;
            bindings = <&tog QWER>;
        };

    // Bluetooth

        combo_bluetoothclear {
            key-positions = <5 29>;
            bindings = <&bt BT_CLR>;
        };
        combo_bluetooth1 {
            key-positions = <1 25>;
            bindings = <&bt BT_SEL 0>;
        };
        combo_bluetooth2 {
            key-positions = <2 26>;
            bindings = <&bt BT_SEL 1>;
        };
        combo_bluetooth3 {
            key-positions = <3 27>;
            bindings = <&bt BT_SEL 2>;
        };
        combo_bluetooth4 {
            key-positions = <4 28>;
            bindings = <&bt BT_SEL 3>;
        };

    // Other

        combo_githublink {
            key-positions = <6 18 30>;
            bindings = <&macro_githublink>;
        };
    };
};



// Keymap

/ {
        keymap {
                compatible = "zmk,keymap";

                dvorak_layer {
                        label = "DVRK";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
      &lt NAVI TAB      &_mma_apos      &_mma_comma     &_mma_dot       &_mma_p         &kp Y               &kp F           &kp G           &kp C           &kp R           &kp L           &kp FSLH
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp LCTRL       &_mma_a         &_mma_o         &_mma_e         &_mma_u         &_mma_i             &kp D           &kp H           &kp T           &kp N           &kp S           &kp MINUS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp LSHFT       &kp SEMI        &kp Q           &kp J           &kp K           &kp X               &kp B           &kp M           &kp W           &kp V           &kp Z       &mt LSHFT EQUAL
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &kp LALT        &kp SPACE   &_lt NMBR SPACE      &lt NAVI BSPC      &kp RALT      &mt LGUI RET
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯

//// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
//      &lt NAVI TAB      &kp APOS        &kp COMMA       &kp DOT         &kp P           &kp Y               &kp F           &kp G           &kp C           &kp R           &kp L           &kp FSLH
//// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
//        &kp LCTRL       &kp A           &kp O           &kp E           &kp U           &kp I               &kp D           &kp H           &kp T           &kp N           &kp S           &kp MINUS
//// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
//        &kp LSHFT       &kp SEMI        &kp Q           &kp J           &kp K           &kp X               &kp B           &kp M           &kp W           &kp V           &kp Z       &mt LSHFT EQUAL
//// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
//                                                        &kp LALT        &kp SPACE   &_lt NMBR SPACE      &lt NAVI BSPC      &sl ACNT      &mt LGUI RET
////                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                qwerty_layer {
                        label = "QWER";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp Q           &kp W           &kp E           &kp R           &kp T               &kp Y           &kp U           &kp I           &kp O           &kp P       &mt LGUI LBKT
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp A           &kp S           &kp D           &kp F           &kp G               &kp H           &kp J           &kp K           &kp L           &kp SEMI    &mt LCTRL APOS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp Z           &kp X           &kp C           &kp V           &kp B               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH    &mt LSHFT RBKT
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &kp LSHFT       &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                gaming_layer {
                        label = "GAME";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp T           &kp Q           &kp W           &kp E           &kp R               &kp Y           &kp PG_UP       &kp UP          &kp PG_DN       &kp P           &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp I           &kp LSHFT       &kp A           &kp S           &kp D           &kp F               &kp H           &kp LEFT        &kp DOWN        &kp RIGHT       &kp SEMI        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &kp G           &kp LCTRL       &kp Z           &kp X           &kp C           &kp V               &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &trans
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &tog GAME       &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                accent_layer {
                        label = "ACNT";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp F20         &kp F21         &kp F22         &kp F23         &trans              &trans          &trans          &trans          &trans          &trans          &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp F15         &kp F16         &kp F17         &kp F18         &kp F19             &trans          &trans          &trans          &trans          &trans          &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &trans          &trans          &trans          &trans          &trans              &trans          &trans          &trans          &trans          &trans          &trans
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &caps_word      &trans          &trans              &trans          &trans          &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                number_layer {
                        label = "NMBR";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          AS(N1)          AS(N2)          AS(N3)          AS(N4)          AS(N5)              AS(LPAR)        AS(N7)          AS(N8)          AS(N9)          AS(RPAR)        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp LGUI        &kp LALT        &kp LCTRL       &kp LSHFT       &kp F13             AS(LBKT)        AS(N4)          AS(N5)          AS(N6)          AS(RBKT)        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          AS(SEMI)        AS(APOS)        AS(COMMA)       AS(DOT)         &kp KP_DOT          AS(GRAVE)       AS(N1)          AS(N2)          AS(N3)          AS(BSLH)        &trans
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          AS(N0)          &kp KP_DOT
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };

                navigation_layer {
                        label = "NAVI";
                        bindings = <
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
        &trans          &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp PAUSE_BREAK     &kp PG_UP       &kp UP          &kp PG_DN       &kp HOME        &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans        &mt LGUI F5     &mt LALT F6     &mt LCTRL F7    &mt LSHFT F8      &kp F13             &kp PSCRN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp END         &trans
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
        &trans          &kp F9          &kp F10         &kp F11         &kp F12         &kp F14             &kp INS       &kp C_VOL_DN      &kp C_MUTE    &kp C_VOL_UP      &kp C_PP        &trans
// ╰───────────────┴───────────────┴───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┴───────────────┴───────────────╯
                                                        &trans          &trans          &trans              &trans          &kp DEL         &trans
//                                                 ╰───────────────┴───────────────┴───────────────╯   ╰───────────────┴───────────────┴───────────────╯
                        >;
                };
        };
};
